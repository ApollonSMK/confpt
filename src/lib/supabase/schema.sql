-- ATIVA A ROW LEVEL SECURITY (RLS)
-- Garante que as políticas de segurança sejam aplicadas por padrão.
alter table public.confrarias enable row level security;
alter table public.discoveries enable row level security;
alter table public.seals enable row level security;
alter table public.submissions enable row level security;


-- POLÍTICAS DE ACESSO PÚBLICO
-- Permite que qualquer pessoa (mesmo não autenticada) leia as descobertas e confrarias.
-- Isto é necessário para que as páginas públicas do site funcionem.

drop policy if exists "Public can read all confrarias" on public.confrarias;
create policy "Public can read all confrarias" on public.confrarias for
select using (true);

drop policy if exists "Public can read all discoveries" on public.discoveries;
create policy "Public can read all discoveries" on public.discoveries for
select using (true);

-- POLÍTICAS DE ACESSO PARA UTILIZADORES AUTENTICADOS

-- Tabela `seals` (Selos)
-- Utilizadores autenticados podem criar, ler, atualizar e apagar OS SEUS PRÓPRIOS selos.
drop policy if exists "Authenticated users can manage their own seals" on public.seals;
create policy "Authenticated users can manage their own seals" on public.seals for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- Tabela `submissions` (Submissões)
-- Utilizadores autenticados podem criar, ler, atualizar e apagar AS SUAS PRÓPRIAS submissões.
drop policy if exists "Authenticated users can manage their own submissions" on public.submissions;
create policy "Authenticated users can manage their own submissions" on public.submissions for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- VIEWS (VISUALIZAÇÕES)
-- Views são como tabelas virtuais baseadas no resultado de uma consulta SQL.
-- Elas ajudam a simplificar queries complexas.

-- View para contar o número de selos por descoberta.
-- Isto evita a necessidade de fazer uma contagem complexa na aplicação.
drop view if exists public.discovery_seal_counts;
create or replace view public.discovery_seal_counts as
select
  discovery_id,
  count(*) as seal_count -- Corrigido de count(id) para count(*)
from
  public.seals
group by
  discovery_id;


-- ESTRUTURA DAS TABELAS
-- Esta secção define as tabelas principais da aplicação.

-- Tabela `confrarias`
-- Armazena as informações sobre as confrarias.
create table
  public.confrarias (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    name text not null,
    motto text not null,
    region text not null,
    seal_url text not null,
    seal_hint text not null,
    constraint confrarias_pkey primary key (id)
  );

-- Tabela `discoveries`
-- Armazena as descobertas (produtos, lugares, pessoas).
create table
  public.discoveries (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    slug text not null,
    title text not null,
    description text not null,
    editorial text not null,
    region text not null,
    type text not null,
    confraria_id bigint null,
    image_url text not null,
    image_hint text not null,
    address text null,
    website text null,
    phone text null,
    constraint discoveries_pkey primary key (id),
    constraint discoveries_slug_key unique (slug),
    constraint discoveries_confraria_id_fkey foreign key (confraria_id) references confrarias (id) on delete set null
  );

-- Tabela `seals`
-- Tabela de junção para registar quando um utilizador "sela" uma descoberta.
create table
  public.seals (
    discovery_id bigint not null,
    user_id uuid not null,
    created_at timestamp with time zone not null default now(),
    constraint seals_pkey primary key (discovery_id, user_id),
    constraint seals_discovery_id_fkey foreign key (discovery_id) references discoveries (id) on delete cascade,
    constraint seals_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  );

-- Tabela `submissions`
-- Armazena as sugestões de descobertas feitas pelos utilizadores.
create table
  public.submissions (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    user_id uuid not null,
    discovery_title text not null,
    editorial text not null,
    region text not null,
    type text not null,
    confraria_id bigint null,
    links text null,
    status text not null default 'Pendente'::text,
    date date not null,
    constraint submissions_pkey primary key (id),
    constraint submissions_confraria_id_fkey foreign key (confraria_id) references confrarias (id) on delete set null,
    constraint submissions_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  );
