-- Drop existing objects if they exist to allow for re-running the script
DROP VIEW IF EXISTS public.discovery_seal_counts;
DROP TABLE IF EXISTS public.seals;
DROP TABLE IF EXISTS public.submissions;
DROP TABLE IF EXISTS public.discoveries;
DROP TABLE IF EXISTS public.confrarias;
DROP TYPE IF EXISTS public.region_enum;
DROP TYPE IF EXISTS public.discovery_type_enum;
DROP TYPE IF EXISTS public.submission_status_enum;

-- Create custom types
CREATE TYPE public.region_enum AS ENUM ('Norte', 'Centro', 'Lisboa', 'Alentejo', 'Algarve', 'AÃ§ores', 'Madeira');
CREATE TYPE public.discovery_type_enum AS ENUM ('Produto', 'Lugar', 'Pessoa');
CREATE TYPE public.submission_status_enum AS ENUM ('Pendente', 'Aprovado', 'Rejeitado');

-- Create confrarias table
CREATE TABLE public.confrarias (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    motto TEXT,
    region public.region_enum NOT NULL,
    seal_url TEXT,
    seal_hint TEXT
);

-- Create discoveries table
CREATE TABLE public.discoveries (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug TEXT NOT NULL UNIQUE,
    title TEXT NOT NULL,
    description TEXT,
    editorial TEXT,
    region public.region_enum NOT NULL,
    type public.discovery_type_enum NOT NULL,
    confraria_id BIGINT REFERENCES public.confrarias(id),
    image_url TEXT,
    image_hint TEXT,
    address TEXT,
    website TEXT,
    phone TEXT
);

-- Create submissions table
CREATE TABLE public.submissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL,
    discovery_title TEXT NOT NULL,
    editorial TEXT,
    region public.region_enum,
    type public.discovery_type_enum,
    confraria_id BIGINT REFERENCES public.confrarias(id),
    links TEXT,
    date DATE NOT NULL,
    status public.submission_status_enum NOT NULL DEFAULT 'Pendente',
    CONSTRAINT submissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Create seals table (join table for user seals on discoveries)
CREATE TABLE public.seals (
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    discovery_id BIGINT NOT NULL REFERENCES public.discoveries(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (user_id, discovery_id)
);

-- Create view for counting seals
CREATE VIEW public.discovery_seal_counts AS
SELECT
    discovery_id,
    count(*) as seal_count
FROM
    public.seals
GROUP BY
    discovery_id;

-- Enable Row Level Security (RLS) for all tables
ALTER TABLE public.confrarias ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.discoveries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.submissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.seals ENABLE ROW LEVEL SECURITY;

-- RLS Policies

-- Allow public read access to confrarias and discoveries
CREATE POLICY "Allow public read access to confrarias" ON public.confrarias FOR SELECT USING (true);
CREATE POLICY "Allow public read access to discoveries" ON public.discoveries FOR SELECT USING (true);

-- Users can only manage their own submissions
CREATE POLICY "Users can insert their own submissions" ON public.submissions FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can view their own submissions" ON public.submissions FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can update their own submissions" ON public.submissions FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own submissions" ON public.submissions FOR DELETE USING (auth.uid() = user_id);

-- Users can only manage their own seals
CREATE POLICY "Users can insert their own seals" ON public.seals FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can view their own seals" ON public.seals FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own seals" ON public.seals FOR DELETE USING (auth.uid() = user_id);
